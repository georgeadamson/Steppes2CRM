<%

	#session[:most_recent] ||= {}
	#session[:recent_supplier_type_id] = params[:type_id]      if params[:type_id]
	#session[:recent_index_filter]     = params[:index_filter] || session[:recent_index_filter] || 'A'

	@collection		||= collection																# Eg: @countries
	model					||= @collection.model.name.snake_case					# Eg: 'country'
	controller		||= model.to_s.plural.snake_case							# Eg: 'countries'

	model						= model.to_sym
	controller			= controller.to_sym

	single_label	||= model.to_s.gsub('_',' ')
	plural_label	||= controller.to_s.gsub('_',' ')


	@url_params		||= params[:url_params] || '{}'
	@url_params			= CGI::unescape(@url_params) if @url_params =~ /^%7B/	# Check for escaped brackets "{"
	@url_params			= JSON.parse( @url_params ) unless @url_params.is_a? Hash

	index_filter    = session[:recent_index_filter]

	def get_params( with_params = {} )
		prm = @url_params.merge( with_params )
		return prm.merge( :url_params => prm.to_json )
	end

	title					||= "Organise the <em>#{ plural_label }</em> list"
	resource_new	||= resource( controller, :new )
	resource_edit	||= resource( controller, :new ).sub( '/new', '/{value}/edit' )	# TODO: Find less hacky way to achieve this!
	label_new			||= "add a new #{ single_label }..."
	label_edit		||= "#{ plural_label.capitalize }"

	# Ditch the filter if there are only a few items in total: (Unfortunately this requires a database query!)
	if @collection.count < 25
		index_filter  = 'all'
		hide_filters  = true
	end
	
	# Apply index filter param if there is one:
	if index_filter

		sql_filter = case index_filter
			when /^[A-z]$/ then "[#{ index_filter.upcase }#{ index_filter.downcase }]%"		# Eg: "G" -> "[Gg]%"
			when /^[0-9]$/ then "#{ index_filter }%"																			# Eg: "5" -> "5%"
			when 'other'   then '[^0-z]%'																									# Any non alphanumeric characters.
			when '0-9'     then '[0-9]%'																									# Any numeric characters.
			when 'all'     then '%'																												# Any characters.
			else                '%'
		end

		@collection = @collection.all( :name.like => sql_filter )

	end

	name_attr			||= @collection.model.new.respond_to?(:display_name) ? :display_name : :name
	@collection			= @collection.all( :order => [ :order_by, :name ] ) if @collection.model.new.respond_to?(:order_by)

	# Define an array of possible filter links: (And define more friendly alternatives to display in the ui)
	# These will be used for filtering via the index_filter param.
	filters           = %w'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0-9 other all'
	friendly_name_for = { 'other' => 'Other', 'all' => 'All' }	# How some filter params should be displayed.
	relevant_filters  = []


-%>
<div class="sectionContainer">

	<%= section_head title %>

	<div id="sysAdminAjaxPanel" class="sectionBody formSurround">

		<div class="filter-buttons <%= 'invisible' if hide_filters %>">

			<!-- Data for use by client-side javascript: -->
			<%= hidden_field :name => 'index_filter',       :value => index_filter %>
			<%= hidden_field :name => 'index_filter_label', :value => friendly_name_for[index_filter] || index_filter %>

			<!-- Display index_filter links: -->
			<% filters.each_with_index do |filter,i| -%><%=
				label  = friendly_name_for[filter] || filter
				link_to label, resource( controller, :index_filter => filter ), :class => "filter-button #{ 'ui-state-default' if filter == index_filter }" 
			%><% end -%>

		</div>

		<%= fields_for model do %>

			<% if !@collection.is_a?(Array) %>
				<%= select :id, :label => label_edit, :prompt => '- Choose one to modify', :rel => '.ajaxPanel', :href => resource_edit, :selected => '', :collection => @collection, :class => 'width2Fields height10Fields', :multiple => true %>
			<% else %>
				<%= select :id, :label => label_edit, :prompt => '- Choose one to modify', :rel => '.ajaxPanel', :href => resource_edit, :selected => '', :collection => @collection, :class => 'width2Fields height10Fields', :multiple => true, :value_method => :id, :text_method => name_attr %>
			<% end %>

		<%end =%>

		<br/>
		<%= link_to label_new, resource_new, :label => 'or', :class => 'new', :title => "Add a new #{ single_label } to this list" %>

	</div>

	<div class="sectionFoot formSurround"></div>
	
</div>