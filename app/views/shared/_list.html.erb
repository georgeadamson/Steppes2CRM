<%

	# The calling code will have already filtered the collection as required.

	# Required argument:
	# collection	Eg: partial( 'common/list', :collection => Country.all )

	# Defaults:
	default_name = "#{ collection.model.to_s.downcase.pluralize }_ids"												# Eg: 'countries_ids'

	# Common URL parameter options and defaults:
	limit					||= params[:limit]								# Limit the number of list items.
	list_type			||= params[:list] || :option			# Eg: :option or :checkbox or :li ( or :radio TBD! )
	ids						||= params[:ids]									# Allows filtering by specific item IDs.
	selected			||= params[:selected]							# List item to flag as selected.
	field_prefix	||= params[:field_prefix]					# Applies to checkbox list only.
	field_name		||= params[:field_name]						# Applies to checkbox list only.
	field_name		||= "#{ field_prefix }[#{ default_name }][]" if field_prefix	# Applies to checkbox list only.
	field_name		||= "#{ default_name }[]"					# Applies to checkbox list only.
	id_prefix			||= params[:id_prefix]  || 'id'		# Applies to checkbox list only.
	empty_message	||= params[:empty_message]				# Alternative markup to return when collection is empty.
	link_params		||= {}														# Used for customising url parameters in a list of links (Eg: when list_type is :li_link)
	custom_attrs  ||= {}														# Additional html attributes to add to each element

	# Sort order can be specified as partial param such as :order => [ :surname.desc, :forename ] or as url param order=surname.desc,forename
	order					||= ( params[:order] || 'name' ).to_s.split(',').map{ |prop|
		fld, dir = prop.split('.')										# Eg: Separate 'surname' and 'desc' out of 'surname.desc' property string.
		fld.to_sym.method( dir || :asc ).call					# Eg: Return :surname.desc (Default direction is :asc when not specified)
	}

	# Prepare URL parameters (if specified) to add to hrefs when generating list of links:
	params[:link_params].split(',').each do |prm|
		key, val = prm.split(':')
		link_params[key] = val
	end if params[:link_params]


	# Apply common options:
	collection	= collection.all( :order => order )										# Provided by params[] or partial's parameters.
	collection	= collection.all( :limit => limit.to_i )							if limit.to_i > 0
	collection	= collection.all( :id    => ids.split(',').compact )	unless ids.blank?

	
	results		= []
	list_type	= list_type.to_sym
	selected  = selected.to_sym if selected && selected.to_sym == :all
	
	# Convert the 'selected' param to an array of value(s) to allow for multiple selections:		
	if selected.is_a? String
		
		selected	= selected.to_s.split(',') 
		
	elsif selected && selected.respond_to?(:all)
		
		# Extract each item's array from the DM Collection:
		ids_to_select = []
		selected.each{ |obj| ids_to_select << obj.id.to_s }
		selected      = ids_to_select
		
	elsif selected.is_a? Array
		
		# Use array as-is.
		
	end


	# Generate html to represent each list item:
	collection.each do |item|

		# Attributes of this list item:
		#attrs							= { :value => item.id }
		label							= item.respond_to?(:display_name) ? item.display_name : item.name
		item_link_params	= {}

		# Derive custom url parameters if we're building a list of links and url params have been specified:
		link_params.each_pair do |key,val|
			item_link_params[key.to_sym] = item.respond_to?(val.to_sym) ? item.method(val.to_sym).call : val if ( key && val )
		end unless link_params.empty?

		
		# Append this list item to the results as an html <option> element:
		case list_type 

			when :checkbox		# Eg: <li><input type="checkbox" value="label" name="name" id="id"/><label for="id">label</label></li>

				attrs = {
					:value	=> item.id,
					:type		=> 'checkbox',
					:label	=> label,
					:name		=> field_name,
					:id			=> id_prefix + item.id.to_s
				}.merge!(custom_attrs)

				# Should we flag this list item as selected?
				attrs[:checked] = 'checked' if !selected.blank? && ( selected == :all || selected.include?( item.id.to_s ) )
							
				results << tag( :li, label, :title => label ) do
					tag( :input, attrs ) +
					tag( :label, label, :for => attrs[:id] )
				end
			

			when :li					# Eg: <li title="label">label</li>

				attrs = { :title => label }.merge!(custom_attrs)
			
				results << tag( :li, label, attrs )


			when :li_link			# Eg: <li><a href="url" title="label">label</a></li>

				attrs = { :title => label }.merge!(custom_attrs)
			
				results << tag( :li, :class => 'ui-icon ui-icon-client' ) do
					link_to label , nested_resource(item, item_link_params), attrs
				end


			when :dd_link			# Eg: <dd><a href="url" title="label">label</a></dd>

				attrs = { :title => label }.merge!(custom_attrs)

				results << tag( :dd, :class => 'ui-icon ui-icon-client' ) do
					link_to label , nested_resource(item, item_link_params), attrs
				end


			else	# :option		# Eg: <option value="value">label</option>

				attrs = { :value => item.id }.merge!(custom_attrs)

				# Decide whether we should flag this list item as selected:
				attrs[:selected] = 'selected' if !selected.blank? && ( selected == :all || selected.include?( item.id.to_s ) )

				results << tag( :option, label, attrs )


		end

	end


	# Alternative markup for when collection contains no items:
	results << empty_message if ( collection.empty? && !empty_message.blank? )

	# Return the results:

-%><%= results -%>